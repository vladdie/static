#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
layout(location = 0) out vec4 fragColor;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform vec3 LightPosition_worldspace;
uniform bool fadeIn;
//uniform bool attractor;
uniform float transparency;

void main(){

	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;
	
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	float distance = length( LightPosition_worldspace - Position_worldspace );

	vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	vec3 color = MaterialAmbientColor +
			MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
			MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

	/*if(fadeIn)
	{
		fragColor = vec4(color, transparency);
	}
	else{
		fragColor = vec4(color, 1.0);
	}*/
	fragColor = vec4(color, 1.0);
}