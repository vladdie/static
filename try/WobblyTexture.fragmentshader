#version 330 core

in vec2 UV;
in vec2 v_blurTexCoords[14];

out vec4 color;

uniform sampler2D renderedTexture;
uniform sampler2D falseColorTexture;
uniform bool edgeCue;
uniform float contrast;
uniform float brightness;
uniform float saturation;
uniform bool modulation;

//saturation and brightness using HSL color model
vec3 RGBToHSL(vec3 color)
{
	vec3 hsl; 
	
	float fmin = min(min(color.r, color.g), color.b);    //Min color value in RGB
	float fmax = max(max(color.r, color.g), color.b);    //Max color value in RGB
	float delta = fmax - fmin;             //Delta RGB value

	hsl.z = (fmax + fmin) / 2.0; // z component represents the luminance

	if (delta == 0.0)		//for there is no chromatic data
	{
		hsl.x = 0.0;	// x component is Hue
		hsl.y = 0.0;	// y component is Saturation
	}
	else //if there is chromatic data
	{
		if (hsl.z < 0.5)
			hsl.y = delta / (fmax + fmin); // saturation
		else
			hsl.y = delta / (2.0 - fmax - fmin); 
		
		float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;
		float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;
		float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;

		if (color.r == fmax )
			hsl.x = deltaB - deltaG; // Hue
		else if (color.g == fmax)
			hsl.x = (1.0 / 3.0) + deltaR - deltaB;
		else if (color.b == fmax)
			hsl.x = (2.0 / 3.0) + deltaG - deltaR; 

		if (hsl.x < 0.0)
			hsl.x += 1.0;
		else if (hsl.x > 1.0)
			hsl.x -= 1.0; 
	}

	return hsl;
}

float HueToRGB(float f1, float f2, float hue)
{
	if (hue < 0.0)
		hue += 1.0;
	else if (hue > 1.0)
		hue -= 1.0;
	float res;
	if ((6.0 * hue) < 1.0)
		res = f1 + (f2 - f1) * 6.0 * hue;
	else if ((2.0 * hue) < 1.0)
		res = f2;
	else if ((3.0 * hue) < 2.0)
		res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
	else
		res = f1;
	return res;
}

vec3 HSLToRGB(vec3 hsl)
{
	vec3 rgb;
	
	if (hsl.y == 0.0)
		rgb = vec3(hsl.z); // Luminance
	else
	{
		float f2;
		
		if (hsl.z < 0.5)
			f2 = hsl.z * (1.0 + hsl.y);
		else
			f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
			
		float f1 = 2.0 * hsl.z - f2;
		
		rgb.r = HueToRGB(f1, f2, hsl.x + (1.0/3.0));
		rgb.g = HueToRGB(f1, f2, hsl.x);
		rgb.b= HueToRGB(f1, f2, hsl.x - (1.0/3.0));
	}
	
	return rgb;
}

vec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) 
{
	vec4 color = vec4(0.0);
    vec2 off1 = vec2(1.411764705882353) * direction;
	vec2 off2 = vec2(3.2941176470588234) * direction;
	vec2 off3 = vec2(5.176470588235294) * direction;
	color += texture2D(image, uv) * 0.1964825501511404;
	color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;
	color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;
	color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;
  	color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;
	color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;
	color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;
	return color;
}

//Contrast, saturation, brightness with linear interpolation
vec3 ContrastSaturationBrightness(vec3 color, float brt, float sat, float con)
{
	// Increase or decrease theese values to adjust r, g and b color channels seperately
	const float AvgLumR = 0.5;
	const float AvgLumG = 0.5;
	const float AvgLumB = 0.5;
	
	const vec3 LumCoeff = vec3(0.2125, 0.7154, 0.0721);
	
	vec3 AvgLumin = vec3(AvgLumR, AvgLumG, AvgLumB);
	vec3 brtColor = color * brt;
	vec3 intensity = vec3(dot(brtColor, LumCoeff));
	vec3 satColor = mix(intensity, brtColor, sat);
	vec3 conColor = mix(AvgLumin, satColor, con);
	return conColor;
}

vec4 xposure(vec4 _color, float gray, float ex){

	 float b = (4.0*ex - 1.0);
	 float a = 1.0 - b;  
	 float f = gray*(a*gray + b); 
	 return f*_color;    
}

float luminance( vec3 color ) {
	vec3 lum = vec3(0.2126, 0.7152, 0.0722);
    return dot(lum,color);
}

void main(){
//method 1
	//vec2 iResolution = vec2(1024,768);
	////vec2 direction = vec2(1,0);
	//color = blur(renderedTexture,UV,iResolution.xy,direction);

//method 2
/*	vec4 sample[25];
	const int tcOffsetColumns = 5;
	const int tcOffsetRows = 5;
	float texCoordOffsets[tcOffsetColumns * tcOffsetRows * 2];
	float xInc = 1.0f/512;
	float yInc = 1.0f/384;

	for (int i = 0; i < tcOffsetColumns; i++)
	{
		for (int j = 0; j < tcOffsetRows; j++)
		{
			texCoordOffsets[(((i*5) + j) * 2) + 0] = (-2.0f * xInc) + (i * xInc);
			texCoordOffsets[(((i*5)+j)*2)+1] = (-2.0f * yInc) + (j * yInc);
		}
	}

		for (int i = 0; i < 25; i++)
		{
			// Sample a grid around and including our texel
			sample[i] = texture(renderedTexture, UV + texCoordOffsets[i]);
		}

		// Gaussian weighting:
		// 1  4  7  4 1
		// 4 16 26 16 4
		// 7 26 41 26 7 / 273 (i.e. divide by total of weightings)
		// 4 16 26 16 4
		// 1  4  7  4 1

    		color = (
        	           (1.0  * (sample[0] + sample[4]  + sample[20] + sample[24])) +
	                   (4.0  * (sample[1] + sample[3]  + sample[5]  + sample[9] + sample[15] + sample[19] + sample[21] + sample[23])) +
	                   (7.0  * (sample[2] + sample[10] + sample[14] + sample[22])) +
	                   (16.0 * (sample[6] + sample[8]  + sample[16] + sample[18])) +
	                   (26.0 * (sample[7] + sample[11] + sample[13] + sample[17])) +
	                   (41.0 * sample[12])
	                   ) / 273.0;
*/

//method 3
	color = vec4(0.0);
	color += texture2D(renderedTexture, v_blurTexCoords[ 0])*0.0044299121055113265;
    color += texture2D(renderedTexture, v_blurTexCoords[ 1])*0.00895781211794;
    color += texture2D(renderedTexture, v_blurTexCoords[ 2])*0.0215963866053; 
    color += texture2D(renderedTexture, v_blurTexCoords[ 3])*0.0443683338718;
    color += texture2D(renderedTexture, v_blurTexCoords[ 4])*0.0776744219933;
    color += texture2D(renderedTexture, v_blurTexCoords[ 5])*0.115876621105;
    color += texture2D(renderedTexture, v_blurTexCoords[ 6])*0.147308056121;
    color += texture2D(renderedTexture, UV         )*0.159576912161;
    color += texture2D(renderedTexture, v_blurTexCoords[ 7])*0.147308056121;
    color += texture2D(renderedTexture, v_blurTexCoords[ 8])*0.115876621105;
    color += texture2D(renderedTexture, v_blurTexCoords[ 9])*0.0776744219933;
    color += texture2D(renderedTexture, v_blurTexCoords[10])*0.0443683338718;
    color += texture2D(renderedTexture, v_blurTexCoords[11])*0.0215963866053;
    color += texture2D(renderedTexture, v_blurTexCoords[12])*0.00895781211794;
    color += texture2D(renderedTexture, v_blurTexCoords[13])*0.0044299121055113265;

	//background color ?????
	//version1-http://blog.csdn.net/neng18/article/details/38083987
	//float _lum = 0.3*color.x + 0.59*color.y;
	//color = xposure(color, _lum, brightness); 
	
	float tempBri;
	float tempSat; 

	if(saturation >= 1.0)
	{
		tempSat = 1.0;
	}else{
		tempSat = saturation;
	}
	if(brightness >= 1.0)
	{
		tempBri = 1.0;
	}else{
		tempBri = brightness;
	}
	color.rgb = ContrastSaturationBrightness( color.rgb, tempBri, tempSat, contrast);


	float EdgeThreshold = 1.01f;

	vec4 falseColor = texture2D(falseColorTexture, UV);
	if(falseColor.rgb == vec3(0.8,0.8,0.8) && modulation)
	{
		ivec2 pix = ivec2(gl_FragCoord.xy);//the current pixel of the fragment-window relative coordinate (x, y, z, 1/w) values for the fragment.
		float s00 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(-1,1)).rgb);
		float s01 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(0,1)).rgb);
		float s02 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(1,1)).rgb);
		float s10 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(-1,0)).rgb);
		float s11 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(0,0)).rgb);
		float s12 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(1,0)).rgb);
		float s20 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(-1,-1)).rgb);
		float s21 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(0,-1)).rgb);
		float s22 = luminance(texelFetchOffset(falseColorTexture, pix, 0, ivec2(1,-1)).rgb);
		float sx = -(s00 + 2 * s10 + s20 - (s02 + 2 * s12 + s22));
		float sy = -(s00 + 2 * s01 + s02 - (s20 + 2 * s21 + s22));
		float g = sx * sx + sy * sy;
		if( g > EdgeThreshold && edgeCue)
        {   color = vec4(0.5,1.0,0.0,0.0);
			//color = texture2D(renderedTexture, UV);
			vec3 oppositeColor = vec3(1.0)-color.rgb;
			float modulationScale = 0.5;
			//color.rgb = oppositeColor * modulationScale + color.rgb*(1-modulationScale);
		}
		else
			//color = texture2D(renderedTexture, UV);//do not blur
			//sharpness
		{
			/*ivec2 pix = ivec2(gl_FragCoord.xy);//the current pixel of the fragment-window relative coordinate (x, y, z, 1/w) values for the fragment.
			float c00 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(-1,1)).rgb);
			float c10 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(-1,0)).rgb);
			float c20 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(-1,-1)).rgb);
			float c01 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(0,1)).rgb);
			float c11 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(0,0)).rgb);
			float c21 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(0,-1)).rgb);
			float c02 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(1,1)).rgb);
			float c12 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(1,0)).rgb);
			float c22 = luminance(texelFetchOffset(renderedTexture, pix, 0, ivec2(1,-1)).rgb);
			float cSum = 4 * c12 - (c01 + c10 + c21 + c12);
			vec4 BaseColor = texture2D(renderedTexture, UV);//do not blur
			color.rgb = vec3(0.2 * cSum) + BaseColor.rgb;*/

			vec4 cSum = vec4(0.0); 
			ivec2 pix = ivec2(gl_FragCoord.xy);//the current pixel of the fragment-window relative coordinate (x, y, z, 1/w) values for the fragment.
			vec4 c00 = texelFetchOffset(renderedTexture, pix, 0, ivec2(-1,1));
			vec4 c10 = texelFetchOffset(renderedTexture, pix, 0, ivec2(-1,0));
			vec4 c20 = texelFetchOffset(renderedTexture, pix, 0, ivec2(-1,-1));
			vec4 c01 = texelFetchOffset(renderedTexture, pix, 0, ivec2(0,1));
			vec4 c11 = texelFetchOffset(renderedTexture, pix, 0, ivec2(0,0));
			vec4 c21 = texelFetchOffset(renderedTexture, pix, 0, ivec2(0,-1));
			vec4 c02 = texelFetchOffset(renderedTexture, pix, 0, ivec2(1,1));
			vec4 c12 = texelFetchOffset(renderedTexture, pix, 0, ivec2(1,0));
			vec4 c22 = texelFetchOffset(renderedTexture, pix, 0, ivec2(1,-1));
			cSum = 4 * c12 - (c01 + c10 + c21 + c12);
			vec4 BaseColor = texture2D(renderedTexture, UV);//do not blur
			color = 0.2 * cSum + BaseColor;
			/*if(modulation){
				color.rgb = vec3(1.0,0.0,0.0);
			}*/
		}
		
		//add the color modulation to target object:

		 if(saturation <= 1.0){
			tempSat = 1.0;
		}else{
			tempSat = 1.2;
		}
		if(brightness <= 1.0){
			tempBri = 1.0;
		}else{
			tempBri = 1.2;
		}
		
		color.rgb = ContrastSaturationBrightness( color.rgb, tempBri, tempSat, 1.0);

		

		//gamma correction
		//float gamma = 2.2f;
		//color.rgb = (pow(color.rgb, vec3(1.0/gamma)));
	}
}
